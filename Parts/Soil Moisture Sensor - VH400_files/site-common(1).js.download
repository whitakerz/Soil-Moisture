// Common javascript functions and variables to be reused across the site. 
var dateFormat = 'YYYY-MM-DD';
var timeFormat = 'HH:mm:ss';
var timedateFormat = 'YYYY-MM-DD HH:mm:ss';
var zeroTime = '0000-00-00 00:00:00';

async function selectBoxFill(URL, selector, key_name, value_name, first_option) {
	let obj = await $.post(URL, {}, null, "json");
	// we need to always return a promise or the chain run out of order, giving undefined results. 
	let sel = $(selector);
	//console.log(obj);
	if (obj.error_msg == "Success") {
		let rows = obj.rows;
		if (typeof first_option != 'undefined') {
			sel.append(
				$('<option>', {
					value: 0,
					text: first_option
				})
			);
		}
		rows.forEach(r => {
			let key = r[key_name]; // can't use compound elements in a json object. 
			let Name = r[value_name];
			sel.append($('<option>', {
				value: key,
				text: Name
			}));
		});
		return rows; // useful for debugging!
	}
}

async function selectPairFill(URL, selector) {
	let obj = await $.getJSON(URL);
	//console.log(obj);
	let sel = $(selector);
	for (let key in obj) {
		let value = obj[key];
		sel.append(
			$('<option>', {
				value: key,
				text: value
			})
		);
	}
	return obj;
}

function toLocalTimeArray(data, format) {
	data.forEach(d => {
		if (d.t != zeroTime) { // ignore zero date
			let utc = moment.utc(d.t).toDate();
			d.t = moment(utc).local().format(format);
		}
	});
}

function toLocalTime(dt, format) {
	if (dt == zeroTime) return dt;
	let utc = moment.utc(dt).toDate();
	return moment(utc).local().format(format);
}

function trackingUrl(carrier, tracking) {
	switch (carrier) {
		case "USPS": return `http://trkcnfrm1.smi.usps.com/PTSInternetWeb/InterLabelInquiry.do?origTrackNum=${tracking}`;
		case "UPS":
		case "UPSDAP": return `http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=${tracking}`;
		case "DHL": return `http://www.dhl.com/en/express/tracking.html?brand=DHL&AWB=${tracking}`;
		case "FEDEX": return `https://www.fedex.com/fedextrack/?trknbr=${tracking}`;
		default: return "#";
	}
}

function randomAlphaNumericString (length) {
	let chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	let result = '';
	for (let i = 0; i < length; i++) result += chars[Math.floor(Math.random() * chars.length)];
	return result;
}

function catchMsg(er, selector) {
	let msg;
	if (typeof er == 'undefined') {
		msg = 'Error: Undefined Error.';
	} else if (typeof er == "string") {
		msg = er;
	} else {
		switch (er.status) {
			case 400: msg = `Error: Malformed request`; break;
			case 401: msg = `Error: Unauthorized Access`; break;
			case 404: msg = `Error: Page not Found`; break;
			case 429: msg = `Error: Rate Limit Exceeded`; break;
			case 500: msg = `Error: Internal Server Error`; break;
			default: msg = `Error: Unknown Error - ${er.status}`;
		}
	}
	$(selector).html(msg);
}

async function cartCount() {
	let obj = await $.post('/cart/count', {}, null, "json");
	if (obj.error_msg == "Success") {
		let count = Number(obj.count);
		$('#cart-count').text(count ? count : "");
	}
}

async function pricesGet() {
	let ProductIDs = $('.product-price').map((_, pp) => {
		return $(pp).attr('ProductID');
	}).get();
	let obj = await $.post('/product/prices', { ProductIDs }, null, "json");
	if (obj.error_msg == "Success") {
		let rows = obj.rows;
		//console.log(rows);
		rows.forEach(p => {
			$(`#price-${p.ProductID}`).html(`$${p.Price}`);
		});
	}
}

async function whoAmI() {
	let user = await $.post('/whoami', {}, null, "json");
	//console.log(user);
	if (user) {
		$('#logout-a').removeClass("d-none");
		$('.whoami-name').html(`${user.first_name} ${user.last_name}`);
		$('.whoami-id').html(`${user.id}`);
		$('#nav-brand-link').attr('href', '/user/dash');
		return user;
	} else {
		$('#login-a').removeClass("d-none");
		$('#register-a').removeClass("d-none");
	}
	return null;
}

async function cartAdd(ProductID, Quantity) {
	let obj = await $.post("/cart/add", { ProductID, Quantity }, null, "json");
	if (obj.error_msg == "Success") {
		location.assign("/cart");
	}
}

$(() => {
	$('.buy-now').click(async ev => {
		ev.preventDefault();
		let id = ev.currentTarget.id;
		let Quantity = 1; // fixed for now. 
		let ProductID = $(`#${id}`).attr('ProductID');
		await cartAdd(ProductID, Quantity);
		return false;
	});


	$('.carousel').carousel({ interval: 1500 }); // Globally changes the feature carousel speed.
	pricesGet();
	cartCount();
	whoAmI();
});



