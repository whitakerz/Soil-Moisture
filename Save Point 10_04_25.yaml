esphome:
  name: sht31_sensor
  friendly_name: Soil
  platform: ESP32
  board: esp32dev
  on_boot:
    priority: 600
    then:
     - lambda: |-
        Wire.begin();
        delay(100);
esp32:
  board: esp32dev
  framework:
    type: esp-idf
  cpu_frequency: 80MHz

api:
  encryption:
    key: !secret soilapi  

ota:
  - platform: esphome
    password: "af02dabd1a628b113fb6ffc6c6a94c17"

# WiFi setup
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.7.105 # ðŸ‘ˆ Replace with your desired static IP
    gateway: 192.168.7.1     # ðŸ‘ˆ Replace with your router's IP
    subnet: 255.255.255.0    # ðŸ‘ˆ Your network's subnet mask
  ap:
    ssid: "Soil Fallback Hotspot"
    password: "BDVDN7O0KT7E"

captive_portal:


# I2C bus
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

# SHT31 sensor
sensor:
  - platform: sht3xd
    i2c_id: bus_a
    address: 0x44  # default address (use 0x45 if A0 pin is pulled high)
    temperature:
      name: "SHT31 Temperature"
      accuracy_decimals: 2
    humidity:
      name: "SHT31 Humidity"
      accuracy_decimals: 2
    update_interval: 30s

    # ----- 5V sense (pre-divider) -----
  - platform: adc
    id: adc_5v_raw
    name: "ADC Pin Voltage (GPIO36)"
    pin: GPIO36
    attenuation: 12db
    update_interval: 5min
    accuracy_decimals: 3
    internal: true

  - platform: copy
    source_id: adc_5v_raw
    id: source_voltage
    name: "5V"
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 1.8
    on_value:
      then:
        - lambda: |-
            static bool present = false;
            if (!present && x > 4.0) present = true;
            else if (present && x < 3.0) present = false;
            id(voltage_present).publish_state(present);

  # ----- LiPo battery voltage -----
  - platform: adc
    id: adc_batt_raw
    name: "ADC Pin Voltage (GPIO32)"
    pin: GPIO32
    attenuation: 12db
    update_interval: 5min
    accuracy_decimals: 3
    internal: true

  - platform: copy
    source_id: adc_batt_raw
    id: battery_voltage
    name: "Battery Voltage"
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 1.36
  
  - platform: copy
    source_id: battery_voltage
    id: battery_percent
    name: "Battery %"
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0
    filters:
      # Nonlinear-ish LiPo curve (tweak to your cell)
      - calibrate_linear:
          - 4.18 -> 100
          - 4.00 -> 85
          - 3.85 -> 60
          - 3.80 -> 50
          - 3.70 -> 25
          - 3.50 -> 5
          - 3.30 -> 0
      # Clamp and smooth
      - lambda: |-
          if (x < 0) x = 0;
          if (x > 100) x = 100;
          return x;
      - sliding_window_moving_average:
          window_size: 4
          send_every: 1     

binary_sensor:
  - platform: template
    id: voltage_present
    name: "Voltage Present"
    internal: true
    device_class: power
    filters:
      - delayed_on: 100ms
      - delayed_off: 300ms
    on_release:
      then:
        - logger.log: "Voltage lost â€” entering deep sleep."
        - light.turn_off: awake_led
        - deep_sleep.enter: deep_sleep_ctrl           